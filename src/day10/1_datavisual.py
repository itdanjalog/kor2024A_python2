'''
파이썬에서 시각화는 데이터 분석의 중요한 부분으로, 데이터를 그래프나 차트 형태로 표현하여 패턴이나 인사이트를 쉽게 파악할 수 있도록 돕습니다.
주요 시각화 라이브러리로는 Matplotlib, Seaborn, Pandas, Plotly, Bokeh 등이 있습니다. 각 라이브러리의 특징과 간단한 예제를 소개할게요.
'''


import matplotlib.pyplot as plt

plt.title("chart1")
plt.plot([1, 4, 9, 16])
plt.show()

'''
import matplotlib.pyplot as plt:

matplotlib 라이브러리의 pyplot 모듈을 plt라는 이름으로 가져옵니다. 이 모듈은 다양한 유형의 그래프를 그리는 데 사용됩니다.
plt.title("chart1"):

그래프의 제목을 "chart1"로 설정합니다. 그래프의 상단에 이 제목이 표시됩니다.
plt.plot([1, 4, 9, 16]):

주어진 데이터 포인트 [1, 4, 9, 16]를 사용하여 선 그래프를 그립니다. 이 값들은 y축의 값이고, x축의 값은 자동으로 인덱스(0, 1, 2, 3)로 설정됩니다. 즉, (0, 1), (1, 4), (2, 9), (3, 16)의 점이 연결되어 선 그래프가 그려집니다.
plt.show():

작성한 그래프를 화면에 표시합니다. 이 함수가 호출되어야 그래프가 실제로 렌더링됩니다.
이 코드를 실행하면 제목이 "chart1"인 선 그래프가 나타나고, y축 값에 따라 점들이 연결된 모습을 볼 수 있습니다.
'''

plt.title("chart2")
plt.plot([10, 20, 30, 40], [1, 4, 9, 16])
plt.show()

'''
plt.title("chart2"):

그래프의 제목을 "chart2"로 설정합니다. 이 제목은 그래프 상단에 표시됩니다.
plt.plot([10, 20, 30, 40], [1, 4, 9, 16]):

두 개의 리스트를 인자로 사용하여 선 그래프를 그립니다.
첫 번째 리스트 [10, 20, 30, 40]는 x축의 값입니다.
두 번째 리스트 [1, 4, 9, 16]는 y축의 값입니다.
즉, 점 (10, 1), (20, 4), (30, 9), (40, 16)을 연결하여 그래프를 그립니다.
plt.show():

작성한 그래프를 화면에 표시합니다. 이 함수가 호출되어야 그래프가 실제로 렌더링됩니다.
'''

plt.title('chart3')
plt.plot([10, 20, 30, 40], [1, 4, 9, 16])
plt.xlabel(" x-axios label")
plt.ylabel( 'y-axios label')
plt.show()

'''
plt.title('chart3'):

그래프의 제목을 "chart3"로 설정합니다. 이 제목은 그래프의 상단에 표시됩니다.
plt.plot([10, 20, 30, 40], [1, 4, 9, 16]):

두 개의 리스트를 사용하여 선 그래프를 그립니다.
첫 번째 리스트 [10, 20, 30, 40]는 x축의 값입니다.
두 번째 리스트 [1, 4, 9, 16]는 y축의 값입니다.
이로 인해 점 (10, 1), (20, 4), (30, 9), (40, 16)이 연결되어 그래프가 생성됩니다.
plt.xlabel(" x-axios label"):

x축의 레이블을 "x-axios label"로 설정합니다. 이 레이블은 x축의 하단에 표시되어, 해당 축의 의미를 설명합니다.
주의: "axios"는 오타로 보이며, "axis"가 맞는 표현입니다.
plt.ylabel('y-axios label'):

y축의 레이블을 "y-axios label"로 설정합니다. 이 레이블은 y축의 좌측에 표시되어, 해당 축의 의미를 설명합니다.
마찬가지로, "axios"는 "axis"로 수정해야 합니다.
plt.show():

작성한 그래프를 화면에 표시합니다. 이 함수가 호출되어야 그래프가 실제로 렌더링됩니다.
'''

# 데이터 생성
x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 7, 11]

# 선 그래프 그리기
plt.title("chart4")
plt.plot(x, y )
plt.xlabel("X-axis label")
plt.ylabel("Y-axis label")
plt.grid()
plt.show()

'''
이 코드는 matplotlib 라이브러리를 사용하여 선 그래프를 그리고, x축과 y축의 레이블을 추가하며, 그리드(grid)를 표시하는 예제입니다. 각 줄의 기능은 다음과 같습니다:

plt.title("chart4"):

그래프의 제목을 "chart4"로 설정합니다. 이 제목은 그래프의 상단에 표시됩니다.
plt.plot(x, y):

x와 y라는 두 개의 리스트(또는 배열)를 사용하여 선 그래프를 그립니다.
x는 x축의 값, y는 y축의 값입니다. 이 두 변수는 사전에 정의되어 있어야 하며, 각 요소는 각각의 점을 나타냅니다.
plt.xlabel("X-axis label"):

x축의 레이블을 "X-axis label"로 설정합니다. 이 레이블은 x축의 하단에 표시되어, 해당 축의 의미를 설명합니다.
plt.ylabel("Y-axis label"):

y축의 레이블을 "Y-axis label"로 설정합니다. 이 레이블은 y축의 좌측에 표시되어, 해당 축의 의미를 설명합니다.
plt.grid():

그래프에 그리드를 추가합니다. 이 함수는 x축과 y축에 수평 및 수직 선을 추가하여 데이터 포인트를 쉽게 읽을 수 있도록 도와줍니다. 그리드는 데이터 시각화에 유용하며, 각 점의 위치를 더 명확하게 보여줍니다.
plt.show():

작성한 그래프를 화면에 표시합니다. 이 함수가 호출되어야 그래프가 실제로 렌더링됩니다.
이 코드를 실행하면 "chart4"라는 제목을 가진 선 그래프가 표시되며, x축과 y축 각각에 설정한 레이블이 나타납니다. 또한, 그리드가 추가되어 그래프를 더 쉽게 읽을 수 있습니다. x와 y 값이 어떻게 정의되어 있는지에 따라 그래프의 모양이 달라질 것입니다.

'''


