# Class , Object
# [ 생각 ] 제품명이 '콜라' , '사이다' 있고 각 가격은 300 , 400 일때 메모리/저장 설계
# [1.변수만 활용 ] : 데이터/자료 1개당 변수 1개씩 , 제품이 많아지면 변수가 많아지므로 관리가 힘들다.
제품명1 = '콜라'; 가격1 = 300 ; 제품명2 = '사이다' ; 가격2 = 400
# [2.리스트를 활용 ] : 제품과 가격을 각 리스트로 분류 , 속성(가격,제품명)이 많아지면 관리가 힘들다.
제품명 = [ '콜라' ,  '사이다']
가격 = [ 300 , 400 ]
# 아래것도 가능 하지만, 제품명과 가격의 구분이 명확 하지 않다.
제품들 = [  '콜라' , 300 ,  '사이다' , 400 ]
# [3.딕셔너리를 활용 ]
제품들 = [ { '제품명' : '콜라' , '가격' : 300 } , { '제품명' : '사이다' , '가격' : 400 }  ]
# [4.문자열,csv형식 활용 ] , 문자열 관리가 힘들다.
제품들 = "콜라,300\n사이다,400\n"
# [5.클래스 활용]
class product : # 클래스 선언/정의
    def __init__(self , name , price ):   # 객체의 저장할 속성들을 정의
        self.name = name
        self.price = price
    def info(self):                       # 클래스내 함수 정의
        print( f'{self.name} 의 가격 : { self.price }' )
# 객체 생성
제품들 = [ product( '콜라' , 300 ) , product( '사이다' , 400 ) ]

'''
    # 객체이란 ? 고유성질 과 행위 가 존재하는 논리적/물리적 형태
        객체(Object) : 본인 외   , 나를 제외한 모든것 
            - 공기o , 안경o , 사람o , 컴퓨터o, 의자o 등등 
            - 수업o , 주문o , 축구o , 공부o , 판매o 등등 
        vs
        주체(Subject) : 본인     , 개발자/나 (Subject)
        
        - 고유성질 : 속성을 뜻하고 데이터/값 를 의미하는 것 
            자동차 예 -> 차량색상 : 검정색 , 속도 : 17km , 차량번호 : 1234 등등 
            강의 예 -> 강사명 : 김현수 , 과목 : 파이썬 
        - 행위 : 함수/메소드 을 뜻하고 여러개실행문을 의미하는 것 
            자동차 예 -> 전진() , 후진() , 주차() , 와이퍼()
            강의 예 -> 쉬는시간() , 타자입력() 
            
    # 클래스이란 ? 고유 성질 과 행위 를 미리 정의 하는것 
        - 클래스 정의/만드는 방법
        class 클래스명( ) : 
            def __init__( self , 속성명1 , 속성명2 ) :
                self.속성명1 = 속성명1
                self.속성명2 = 속성명2 
                
            def 메소드명( self , 매개변수1 , 매개변수2 ) :
                실행문
                
        - 객체 정의/만드는 방법 
        클래스명( 속성자료1 , 속성자료2 )
'''
'''
    이름 , 나이 , 도시락내용물 을 가지는 학생을 설계하시오.
        '유재석' , 40 , '컵라면' , '강호동' , 45 , '김밥'
    각 객체를 생성해서 도시락먹기 행위/함수를 실행했을때 각 객체가 가지는 도시락내용물을 출력하시오.
'''
# [ 딕셔너리 사용했을때 ]
students = [
        { 'name' : '유재석' , 'age' : 40 , 'lunchbox' : '컵라면'} ,
        { 'name' : '강호동' , 'age' : 45 , 'lunchbox' : '김밥'}
         ]
# [ 클래스와 객체를 활용 ]
# [1] 클래스 정의/만들기 , 설계도
class Student( ) :
    def __init__(self , name , age , lunchbox ):
        # 해당 클래스의 객체는 이름 과 나이 와 도시락내용물 저장하는 속성들을 구상
        self.name = name
        self.age = age
        self.lunchbox = lunchbox
    def lunch(self):
        print( f'점심시간 밥먹기 : { self.lunchbox } ')

# [2] 클래스 기반으로 객체 생성
students = [  Student( '유재석' , 40 , '컵라면') ,  Student( '강호동' , 45 , '김밥')  ]
# [3] 각 객체들의 메소드 호출
students[0].lunch() # 점심시간 밥먹기 : 컵라면
students[1].lunch() # 점심시간 밥먹기 : 김밥

























